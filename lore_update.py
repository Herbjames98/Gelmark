# lore_update.py
import os, json, importlib.util, time

ROOT = os.path.dirname(os.path.abspath(__file__))
LORE_DIR = os.path.join(ROOT, "lore_modules")

def _load_mod(path):
    name = f"lore_{os.path.basename(path)}_{time.time()}"
    spec = importlib.util.spec_from_file_location(name, path)
    mod = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(mod)
    return mod

def _dump(path, varname, data: dict):
    with open(path, "w", encoding="utf-8") as f:
        f.write(f"{varname} = {json.dumps(data, indent=4)}\n")

def _ensure_file(fname, varname, summary_text):
    path = os.path.join(LORE_DIR, fname)
    if not os.path.exists(LORE_DIR):
        os.makedirs(LORE_DIR, exist_ok=True)
    if not os.path.exists(path):
        payload = {
            "summary": summary_text, "major_events": [],
            "companions_bond_status": [], "traits_unlocked": [],
            "shrines_visited": [], "visions_echo_sequences": [],
            "lore_codex_expansions": [], "timeline_edits": [],
            "key_terms_introduced": [], "locations_realms_visited": [],
            "faction_threat_encounters": [], "oaths_rituals_performed": [],
            "artifacts_discovered": [], "narrative_threads_opened": [],
            "narrative_threads_closed": []
        }
        _dump(path, varname, payload)
    return path

def backfill_lore_if_empty(live: dict):
    _ensure_file("prologue.py", "prologue_lore",
        "The prologue establishes the explosion and the time jump via the Gel Capsule.")
    _ensure_file("act1.py", "act1_lore",
        "Data for this act will be generated dynamically by the AI after the Prologue.")
    _ensure_file("act2.py", "act2_lore", "Data for this act has not yet been chronicled.")
    _ensure_file("act3.py", "act3_lore", "Data for this act has not yet been chronicled.")

def update_lore_from_scene(prev_scene: dict, choice: dict, gen_scene: dict):
    act = 0
    try:
        act = int(gen_scene.get("id","").split("_")[0].replace("act",""))
    except Exception:
        pass
    if act <= 0:
        fname, varname = "prologue.py", "prologue_lore"
    else:
        fname, varname = f"act{act}.py", f"act{act}_lore"

    path = _ensure_file(fname, varname, "Auto-generated by play session.")
    mod = _load_mod(path)
    lore = getattr(mod, varname, {})
    lore.setdefault("major_events", [])
    evt = f"{prev_scene.get('title','Scene')} -> [{choice.get('label','Choice')}] -> {gen_scene.get('title','Next')}"
    if evt not in lore["major_events"]:
        lore["major_events"].append(evt)

    for codex in gen_scene.get("codex_additions", []) or []:
        lore.setdefault("lore_codex_expansions", [])
        if codex not in lore["lore_codex_expansions"]:
            lore["lore_codex_expansions"].append(codex)

    _dump(path, varname, lore)
